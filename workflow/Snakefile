from os import getcwd, makedirs, walk
from os.path import dirname, exists, join
from tempfile import gettempdir
from shutil import rmtree

import pandas as pd
from snakemake.utils import validate

CONFIG_DIR = "config"
DATA_DIR = "data"
LOG_DIR = "logs"
RESOURCES_DIR = "resources"
RESULTS_DIR = "results"
RULES_DIR = "rules"
REPORT_DIR = "report"


configfile: join(CONFIG_DIR, "config.yaml")


onstart:
    if config["input"]["mode"] == "gdc":
        if not exists(config["input"]["gdc"]["meta_file"]):
            print("Getting GDC file metadata...")
            makedirs(
                dirname(config["input"]["gdc"]["meta_file"]), mode=0o755, exist_ok=True
            )
            shell("Rscript ./scripts/gdc_file_meta.R")
        else:
            print("Using existing GDC file metadata")


STUDY_NAME = config["study"]

TEMP_DIR = config["tmp_dir"] if config["tmp_dir"] else gettempdir()

EXPAND_PARAMS = {}

SNAKEMAKE_WRAPPERS_VERSION = config["wrappers"]["public"]["version"]
INPUT_MODE = config["input"]["mode"]

REF_URL = config["resources"]["ref"]["url"]
REF_FASTA_FILENAME = config["resources"]["ref"]["filename"]

REF_FASTA_URL = join(REF_URL, REF_FASTA_FILENAME)
REF_FASTA_FILE = join(RESOURCES_DIR, "ref", REF_FASTA_FILENAME)

if INPUT_MODE == "gdc":
    GDC_BAM_META_FILE = config["input"]["gdc"]["meta_file"]
    GDC_BAM_META_DF = pd.read_csv(
        GDC_BAM_META_FILE,
        sep="\t",
    ).set_index("file_id", drop=False, verify_integrity=True)
    GDC_BAM_ID_WILDCARD_STR = "{bam_id}"
    GDC_BAM_IDS = GDC_BAM_META_DF["file_id"].tolist()
    EXPAND_PARAMS["bam_id"] = GDC_BAM_IDS
    GDC_RESULTS_DIR = join(RESULTS_DIR, "gdc")
    GDC_LOG_DIR = join(LOG_DIR, "gdc")
    GDC_BAM_META_LOG = join(GDC_LOG_DIR, "gdc_bam_meta.log")
    GDC_UNMAPPED_BAM_FILE = join(GDC_RESULTS_DIR, "{bam_id}_unmapped.bam")
    GDC_UNMAPPED_BAM_LOG = join(GDC_LOG_DIR, "{bam_id}_unmapped_bam.log")
    GDC_SORTED_UNMAPPED_BAM_FILE = join(GDC_RESULTS_DIR, "{bam_id}_unmapped_sorted.bam")
    GDC_SORTED_UNMAPPED_BAM_LOG = join(GDC_LOG_DIR, "{bam_id}_unmapped_sorted_bam.log")
    GDC_UNMAPPED_FASTQ1_FILE = join(GDC_RESULTS_DIR, "{bam_id}_unmapped_1.fastq.gz")
    GDC_UNMAPPED_FASTQ2_FILE = join(GDC_RESULTS_DIR, "{bam_id}_unmapped_2.fastq.gz")
    GDC_UNMAPPED_FASTQ_LOG = join(GDC_LOG_DIR, "{bam_id}_unmapped_fastq.log")

BOWTIE2_RESULTS_DIR = join(RESULTS_DIR, "bowtie2")
BOWTIE2_LOG_DIR = join(LOG_DIR, "bowtie2")
BOWTIE2_INDEX_DIR = join(RESOURCES_DIR, "bowtie2", "index")
BOWTIE2_INDEX_LOG = join(BOWTIE2_LOG_DIR, "genome_index.log")
BOWTIE2_SAM_FILE = join(BOWTIE2_RESULTS_DIR, "{bam_id}.sam")
BOWTIE2_FILTERED_SAM_FILE = join(BOWTIE2_RESULTS_DIR, "{bam_id}_filtered.sam")
BOWTIE2_ALIGN_LOG = join(BOWTIE2_LOG_DIR, "{bam_id}.log")
BOWTIE2_SORTED_FILTERED_SAM_FILE = join(
    BOWTIE2_RESULTS_DIR, "{bam_id}_filtered_sorted.sam"
)
BOWTIE2_SORTED_FILTERED_SAM_LOG = join(BOWTIE2_LOG_DIR, "{bam_id}_filtered_sorted.log")
BOWTIE2_FILTERED_FASTQ1_FILE = join(BOWTIE2_RESULTS_DIR, "{bam_id}_filtered_1.fastq.gz")
BOWTIE2_FILTERED_FASTQ2_FILE = join(BOWTIE2_RESULTS_DIR, "{bam_id}_filtered_2.fastq.gz")
BOWTIE2_FILTERED_FASTQ_LOG = join(BOWTIE2_LOG_DIR, "{bam_id}_filtered_fastq.log")

SAMTOOLS_SORT_THREADS = (
    workflow.cores
    if config["samtools"]["sort"]["threads"] == "all"
    else config["samtools"]["sort"]["threads"]
)
SAMTOOLS_FASTQ_THREADS = (
    workflow.cores
    if config["samtools"]["fastq"]["threads"] == "all"
    else config["samtools"]["fastq"]["threads"]
)
BOWTIE2_BUILD_THREADS = (
    workflow.cores
    if config["bowtie2"]["build"]["threads"] == "all"
    else config["bowtie2"]["build"]["threads"]
)
BOWTIE2_ALIGN_THREADS = (
    workflow.cores
    if config["bowtie2"]["align"]["threads"] == "all"
    else config["bowtie2"]["align"]["threads"]
)

SAMTOOLS_SORT_WRAPPER = join(SNAKEMAKE_WRAPPERS_VERSION, "/bio/samtools/sort")
SAMTOOLS_FASTQ_SEPARATE_WRAPPER = join(
    SNAKEMAKE_WRAPPERS_VERSION, "/bio/samtools/fastq/separate"
)
BOWTIE2_BUILD_WRAPPER = join(SNAKEMAKE_WRAPPERS_VERSION, "/bio/bowtie2/build")
BOWTIE2_ALIGN_WRAPPER = join(SNAKEMAKE_WRAPPERS_VERSION, "/bio/bowtie2/align")


include: join(RULES_DIR, "gdc_file.smk")
include: join(RULES_DIR, "host_filter.smk")
include: join(RULES_DIR, "ref.smk")


wildcard_constraints:
    **{w: "|".join(set([re.escape(v) for v in l])) for w, l in EXPAND_PARAMS.items()},


rule all:
    input:
        REF_FASTA_FILE,


def clean(*dirs):
    for clean_dir in dirs:
        if exists(clean_dir):
            rmtree(clean_dir)
        for dirpath, dirnames, filenames in sorted(walk(getcwd())):
            for name in dirnames:
                if name == "__pycache__":
                    pycache_dir = join(dirpath, name)
                    if exists(pycache_dir):
                        rmtree(pycache_dir)


rule clean:
    run:
        clean(RESULTS_DIR, LOG_DIR)


rule clean_all:
    run:
        clean(RESOURCES_DIR, RESULTS_DIR, LOG_DIR)
